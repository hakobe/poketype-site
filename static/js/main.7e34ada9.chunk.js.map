{"version":3,"sources":["index.js"],"names":["SelectablePokeTypeButton","connect","state","disabled","typ","selection","has","size","selected","dispatch","ownProps","onSelect","type","selectedType","wrapperCn","classNames","className","onClick","TypeNameToValue","ノーマル","poketype","ほのお","みず","でんき","くさ","こおり","かくとう","どく","じめん","ひこう","エスパー","むし","いわ","ゴースト","ドラゴン","あく","はがね","フェアリー","SelectablePokeTypeButtons","buttons","Object","keys","map","key","ResetButton","SelectModeButton","mode","selectedMode","selectMode","deffenceCn","defence","active","offenceCn","offence","calcEffectivenesses","target","Array","from","v","ef","message","value","skillType","calcEffectivenessesAsDefence","calcEffectivenessesAsOffence","filter","e","CalculatedPokemonEffectivenessList","effectivenesses","elems","cn","toString","replace","getNextSelection","current","nextSelection","Set","delete","add","clear","store","createStore","action","root","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.7e34ada9.chunk.js","sourcesContent":["import React from 'react'\nimport ReactDOM from 'react-dom'\nimport * as poketype from 'poketype'\nimport { connect, Provider } from 'react-redux'\nimport { createStore } from 'redux'\nimport classNames from 'classnames'\n\nimport './style.scss'\n\n// action\nconst SELECT_POKE_TYPE = 'SELECT_POKE_TYPE'\nconst RESET_POKE_TYPE = 'RESET_POKE_TYPE'\nconst SELECT_MODE = 'SELECT_MODE'\n\nconst selectPokeType = typ => {\n  return {\n    type: SELECT_POKE_TYPE,\n    selectedType: typ\n  }\n}\n\nconst resetPokeType = () => {\n  return {\n    type: RESET_POKE_TYPE\n  }\n}\n\nconst selectMode = mode => {\n  return {\n    type: SELECT_MODE,\n    selectedMode: mode\n  }\n}\n\n// components\nconst PokeTypeButton = ({ disabled, selected, typ, onSelect }) => {\n  const wrapperCn = classNames({\n    'poke-type-button': true,\n    [typ]: true,\n    selected: selected(typ),\n    disabled: disabled(typ)\n  })\n\n  return (\n    <button\n      className={wrapperCn}\n      disabled={disabled(typ)}\n      onClick={() => onSelect()}\n    >\n      {typ}\n    </button>\n  )\n}\n\nconst mapStateToPropsPTB = state => {\n  return {\n    disabled: typ => !state.selection.has(typ) && state.selection.size === 2,\n    selected: typ => state.selection.has(typ)\n  }\n}\n\nconst mapDispatchToPropsPTB = (dispatch, ownProps) => {\n  return {\n    onSelect: () => {\n      dispatch(selectPokeType(ownProps.typ))\n    }\n  }\n}\n\nconst SelectablePokeTypeButton = connect(\n  mapStateToPropsPTB,\n  mapDispatchToPropsPTB\n)(PokeTypeButton)\n\nconst TypeNameToValue = {\n  ノーマル: poketype.ノーマル,\n  ほのお: poketype.ほのお,\n  みず: poketype.みず,\n  でんき: poketype.でんき,\n  くさ: poketype.くさ,\n  こおり: poketype.こおり,\n  かくとう: poketype.かくとう,\n  どく: poketype.どく,\n  じめん: poketype.じめん,\n  ひこう: poketype.ひこう,\n  エスパー: poketype.エスパー,\n  むし: poketype.むし,\n  いわ: poketype.いわ,\n  ゴースト: poketype.ゴースト,\n  ドラゴン: poketype.ドラゴン,\n  あく: poketype.あく,\n  はがね: poketype.はがね,\n  フェアリー: poketype.フェアリー\n}\n\nconst PokeTypeButtons = () => {\n  const buttons = Object.keys(TypeNameToValue).map(typ => (\n    <SelectablePokeTypeButton key={typ} typ={typ} />\n  ))\n  return <div className=\"poke-type-buttons\">{buttons}</div>\n}\n\nconst SelectablePokeTypeButtons = connect()(PokeTypeButtons)\n\nconst mapDispatchToPropsRB = dispatch => {\n  return {\n    onClick: () => {\n      dispatch(resetPokeType())\n    }\n  }\n}\n\nconst ResetButton = connect(null, mapDispatchToPropsRB)(({ onClick }) => (\n  <button className=\"poke-type-reset\" onClick={onClick}>\n    リセット\n  </button>\n))\n\nconst mapStateToPropsSM = state => {\n  return {\n    mode: state.mode\n  }\n}\n\nconst mapDispatchToPropsSM = dispatch => {\n  return {\n    onClick: mode => {\n      dispatch(selectMode(mode))\n    }\n  }\n}\n\nconst SelectModeButton = connect(mapStateToPropsSM, mapDispatchToPropsSM)(\n  ({ mode, onClick }) => {\n    const deffenceCn = classNames({\n      defence: true,\n      active: mode === 'defence'\n    })\n    const offenceCn = classNames({\n      offence: true,\n      active: mode === 'offence'\n    })\n    return (\n      <div className=\"poke-mode-select\">\n        <div className=\"msg\">えらんだタイプで</div>\n        <button className={deffenceCn} onClick={() => onClick('defence')}>\n          ぼうぎょ\n        </button>\n        <button className={offenceCn} onClick={() => onClick('offence')}>\n          こうげき\n        </button>\n      </div>\n    )\n  }\n)\n\nconst PokemonEffectivenessList = ({ effectivenesses }) => {\n  const elems = effectivenesses.map(ef => {\n    const cn = classNames({\n      'poke-type-result': true,\n      [ef.skillType]: true,\n      ['val' + ef.value.toString().replace('.', '')]: true\n    })\n    return (\n      <li className={cn} key={ef.skillType + '-' + ef.value}>\n        <div className=\"poke-effectiveness-value\">x {ef.value}</div>\n        <div className=\"poke-effectiveness-type\">{ef.skillType}</div>\n      </li>\n    )\n  })\n  return <ul className=\"poke-type-results\">{elems}</ul>\n}\n\nconst calcEffectivenessesAsDefence = selection => {\n  const target = new poketype.Pokemon(\n    ...Array.from(selection).map(v => TypeNameToValue[v])\n  )\n  return Object.keys(TypeNameToValue).map(typ => {\n    const ef = poketype.calcEffectiveness(TypeNameToValue[typ], target)\n    return {\n      message: ef.message,\n      value: ef.value,\n      skillType: typ\n    }\n  })\n}\n\nconst calcEffectivenessesAsOffence = selection => {\n  if (selection.size !== 1) {\n    return []\n  }\n\n  return Object.keys(TypeNameToValue).map(typ => {\n    const target = new poketype.Pokemon(TypeNameToValue[typ])\n    const ef = poketype.calcEffectiveness(\n      TypeNameToValue[[...selection][0]],\n      target\n    )\n    return {\n      message: ef.message,\n      value: ef.value,\n      skillType: typ\n    }\n  })\n}\n\nconst calcEffectivenesses = (selection, mode) => {\n  if (selection.size === 0) {\n    return []\n  }\n\n  return (mode === 'defence'\n    ? calcEffectivenessesAsDefence(selection)\n    : calcEffectivenessesAsOffence(selection)\n  ).filter(e => e.value !== 1)\n}\n\nconst mapStateToPropsPEL = state => {\n  return {\n    effectivenesses: calcEffectivenesses(state.selection, state.mode)\n  }\n}\n\nconst CalculatedPokemonEffectivenessList = connect(mapStateToPropsPEL)(\n  PokemonEffectivenessList\n)\n\n// reducer\n\nconst getNextSelection = (current, typ, mode) => {\n  const nextSelection = new Set(current)\n  if (mode === 'defence') {\n    if (nextSelection.has(typ)) {\n      nextSelection.delete(typ)\n    } else if (nextSelection.size < 2) {\n      nextSelection.add(typ)\n    }\n  } else {\n    // offence\n    if (nextSelection.has(typ)) {\n      nextSelection.delete(typ)\n    } else {\n      nextSelection.clear()\n      nextSelection.add(typ)\n    }\n  }\n  return nextSelection\n}\n\nconst app = (state = { selection: new Set(), mode: 'defence' }, action) => {\n  switch (action.type) {\n    case SELECT_POKE_TYPE:\n      const nextSelection = getNextSelection(\n        state.selection,\n        action.selectedType,\n        state.mode\n      )\n\n      return {\n        ...state,\n        selection: nextSelection\n      }\n    case RESET_POKE_TYPE:\n      return {\n        ...state,\n        selection: new Set()\n      }\n    case SELECT_MODE:\n      return {\n        ...state,\n        selection: new Set(),\n        mode: action.selectedMode\n      }\n    default:\n      return state\n  }\n}\n\n// main\nconst store = createStore(app)\n\nconst App = () => {\n  return (\n    <Provider store={store}>\n      <div className=\"poke-type-wrapper\">\n        <h1>Poketype</h1>\n        <SelectModeButton />\n        <SelectablePokeTypeButtons />\n        <ResetButton />\n        <CalculatedPokemonEffectivenessList />\n      </div>\n    </Provider>\n  )\n}\n\nconst root = document.getElementById('root')\nif (root) {\n  ReactDOM.render(<App />, root)\n}\n"],"sourceRoot":""}